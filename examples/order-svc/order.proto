syntax = "proto3";

package svc.order;
import "common.proto";
option go_package = "internal/core/domain";

service OrderService {
  rpc FindOrder(FindOrderRequest) returns (FindOrderResponse) {}
  rpc FindAllOrder(FindAllOrderRequest) returns (FindAllOrderResponse) {}
  rpc StoreOrder(StoreOrderRequest) returns (StoreOrderResponse) {}
  rpc UpdateOrder(UpdateOrderRequest) returns (UpdateOrderResponse) {}
  rpc DeleteOrder(DeleteOrderRequest) returns (DeleteOrderResponse) {}
}

message Order {
  string id = 1; // @gotags: bson:"id,omitempty"
  string short_id = 2; // @gotags: bson:"short_id,omitempty"
  ProductOrderType type = 3; // @gotags: bson:"type,omitempty"
  repeated OrderProduct products = 4; // @gotags: bson:"products,omitempty"
  string promo_id = 5; // @gotags: bson:"promo_id,omitempty"
  OrderStatusType status = 6; // @gotags: bson:"status,omitempty"
  Address delivery_address = 7; // @gotags: bson:"delivery_address,omitempty"
  string user_id = 8; // @gotags: bson:"user_id,omitempty"
  string merchant_id = 9; // @gotags: bson:"merchant_id,omitempty"
  string payment_id = 10; // @gotags: bson:"payment_id,omitempty"
  int64 created_at = 11; // @gotags: bson:"created_at,omitempty"
  int64 updated_at = 12; // @gotags: bson:"updated_at,omitempty"
}


message FindOrderRequest {
  string id = 1;
  
}

message FindOrderResponse {
  Order order = 1;
}

message FindAllOrderRequest {
  int64 limit = 1;
  int64 offset = 2;
  OrderByType orderBy = 3;
  OrderTypeType orderType = 4;
  
}

message FindAllOrderResponse {
  repeated Order orders = 1;
  int64 count = 2;
}

message StoreOrderRequest {
  Order order = 1;
}

message StoreOrderResponse {
  string id = 1;
}

message UpdateOrderRequest {
  Order order = 1;
}

message UpdateOrderResponse {
  string id = 1;
}

message DeleteOrderRequest {
  string id = 1;
  
}

message DeleteOrderResponse {
  string id = 1;
}
